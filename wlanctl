#!/usr/bin/env python
# -*- coding: utf-8 -*-
import os
try:
    _path = os.path.abspath(os.path.dirname(__file__))
    execfile('%s/venv/bin/activate_this.py'%_path, dict(__file__='%s/venv/bin/activate_this.py'%_path))
except:
    pass
from toughlib import choosereactor
choosereactor.install_optimal_reactor(False)
import sys, os,click,signal
sys.path.insert(0, os.path.split(__file__)[0])
from twisted.python import log
from twisted.internet import reactor
from toughlib import config as iconfig
from toughlib.dbengine import get_engine
from toughlib import dispatch,logger
from toughwlan import __version__
import platform as pf

reactor.suggestThreadPoolSize(60)

def setup_logger(config):
    log.startLogging(sys.stdout)
    syslog = logger.Logger(config)
    dispatch.register(syslog)
    return syslog

def update_timezone(config):
    if 'TZ' not in os.environ:
        os.environ["TZ"] = config.system.tz
    try:time.tzset()
    except:pass

def reactor_run():
    def ExitHandler(signum, stackframe):
        print "Got signal: %s" % signum
        reactor.callFromThread(reactor.stop)
    signal.signal(signal.SIGTERM, ExitHandler)
    reactor.run()

def print_version(ctx, param, value):
    if not value or ctx.resilient_parsing:
        return
    click.echo(click.style("ToughWLAN {0}".format(__version__),fg='cyan'))
    ctx.exit()

def print_info(ctx, param, value):
    if not value or ctx.resilient_parsing:
        return
    click.echo(click.style("Linux distribution: {0}".format(','.join(pf.linux_distribution())),fg='cyan'))
    click.echo(click.style("ToughWLAN version: {0}".format(__version__),fg='cyan'))
    click.echo(click.style("Env_home: {0}".format(os.environ.get("HOME")),fg='cyan'))
    click.echo(click.style("Env_path: {0}".format(os.environ.get("PATH")),fg='cyan'))
    click.echo(click.style("Server platform: {0},{1}".format(pf.platform(),pf.machine()),fg='cyan'))
    click.echo(click.style("Python version: {0},{1}".format(pf.python_implementation(), pf.python_version()),fg='cyan'))
    ctx.exit()


@click.group()
@click.option('--version', is_flag=True, callback=print_version,expose_value=False, is_eager=True)
@click.option('--info', is_flag=True, callback=print_info,expose_value=False, is_eager=True, help="server info")
def cli():
    pass


@click.command()
@click.option('-p','--port', default=0,type=click.INT, help='customer http port')
@click.option('-c','--conf', default='/etc/toughwlan.json', help='config file')
@click.option('-d','--debug', is_flag=True)
def httpd(port,conf,debug):
    """ httpd option """
    from toughwlan.manage import httpd
    config = iconfig.find_config(conf)
    update_timezone(config)
    if debug:
        config.defaults.debug = True
    if port > 0:
        config['admin']['port'] = port
    dbengine = get_engine(config)
    setup_logger(config)
    httpd.run(config,dbengine)
    reactor_run()

@click.command()
@click.option('-c','--conf', default='/etc/toughwlan.json', help='config file')
@click.option('-d','--debug', is_flag=True)
def task(conf,debug):
    """ task option """
    from toughwlan.manage import ddns_task
    config = iconfig.find_config(conf)
    update_timezone(config)
    if debug:
        config.defaults.debug = True
    dbengine = get_engine(config)
    setup_logger(config)
    ddns_task.run(config,dbengine)
    reactor_run()


@click.command()
@click.option('-c','--conf', default='/etc/toughwlan.json', help='config file')
@click.option('-d','--debug', is_flag=True)
def portald(conf,debug):
    """ portal listen option """
    from toughwlan.manage.portal import portald
    config = iconfig.find_config(conf)
    update_timezone(config)
    if debug:
        config.defaults.debug = True
    dbengine = get_engine(config)
    setup_logger(config)
    portald.run(config,dbengine)
    reactor_run()



@click.command()
@click.option('-c','--conf', default='/etc/toughwlan.json', help='config file')
@click.option('-f','--force', is_flag=True)
def initdb(conf,force):
    """ initdb option """
    from toughwlan.common import initdb as init_db
    config = iconfig.find_config(conf)
    init_db.update(config,force=force)

# @click.command()
# @click.option('-c','--conf', default='/etc/toughwlan.json', help='config file')
# @click.option('-f','--force', is_flag=True)
# def inittest(conf,force):
#     """ initdb option """
#     from toughwlan.common import inittest as init_test
#     config = iconfig.find_config(conf)
#     init_test.update(config)

@click.command()
@click.option('-c','--conf', default='/etc/toughwlan.json', help='config file')
@click.option('-d','--debug', is_flag=True)
@click.option('--exitwith', default=0,type=click.INT, help='exit after sec')
def standalone(conf,debug,exitwith):
    """ wlan standalone mode option """
    from toughwlan.manage import httpd
    from toughwlan.manage import ddns_task
    from toughwlan.manage.portal import portald
    config = iconfig.find_config(conf)
    update_timezone(config)
    if debug:
        config.defaults.debug = True
    dbengine = get_engine(config)
    log = setup_logger(config)
    httpd.run(config,dbengine)
    ddns_task.run(config,dbengine)
    portald.run(config,dbengine)
    if exitwith > 0:
        print "testing application running and exit after %s seconds" % exitwith
        reactor.callLater(exitwith,reactor.stop)
    reactor_run()


cli.add_command(httpd)
cli.add_command(task)
cli.add_command(portald)
cli.add_command(initdb)
# cli.add_command(inittest)
cli.add_command(standalone)

if __name__ == '__main__':
    cli()



